
/**
 * 31 Aug 2023
 * upgrading typeorm and mysql2
 * "typeorm": "^0.3.17"
 * "mysql2": "^3.6.0",
 * Previous versions:
 * "mysql2": "^2.3.3",
 * "typeorm": "^0.2.45"
 * 
 * Ref: https://www.npmjs.com/package/typeorm
 * npm i mysql2@latest typeorm@latest
 * npm install reflect-metadata --save
 * 
 * issue after upgrade:
 * in the file connect.ts(<proj-dir>/nazoxTest/cd-api/src/CdApi/sys/base/connect.ts)
 * all the earlier imports are depicated
 * import {
    createConnection,
    getConnection,
    ConnectionOptions,
    ConnectionManager,
    getConnectionManager,
    Connection
} from 'typeorm';

 * 
 * created <proj-dir>/cd-api/src/CdApi/sys/base/connect.v2.ts
 * to implement the lates connection codes
 * Ref: https://www.npmjs.com/package/typeorm
 * All other upgrade notes are joted in the file 
 * created <proj-dir>/cd-api/src/CdApi/sys/base/connect.v2.ts
 * 
 * from examples given, entity must exist before the request
 * we need to have a possible way of using dynamic entities.
 * the entity should be specified by module name, which will 
 * identify where the required files are
 * 
*/

/**
 * develop type orm migration mechanism for corpdesk
 * https://hackmd.io/@rohit-gupta/HkG8bdzPm
 */
//------------------------------------
// OR-FILTER
const filterOr = { where: [{ aa: 'a' }, { bb: 'b' }] }

// AND-FILTER
const filterAnd = { where: { aa: 'a', bb: 'b' } }

// ORDERBY
async function getPaged() {
    return await this.repo.findAndCount({
        where: { where: { aa: 'a', bb: 'b' } },
        order: { aa: { aaName: 'ASC' } },
        skip: 0,
        take: 5,
    });
}

// working with json in mysql
// https://www.digitalocean.com/community/tutorials/working-with-json-in-mysql

JSON_EXTRACT(`field_name` , '$.jsonPath') '= or > or <' 

// query json data

/**
   * 
      {
          "ctx": "Sys",
          "m": "InteRact",
          "c": "InteRactPubController",
          "a": "actionGet",
          "dat": {
              "f_vals": [
                  {
                      "filter": [
                          {
                              "field": "user_id",
                              "operator": "=",
                              "val": 1007,
                              "conjType": "or"
                          },
                          {
                              "field": "user_id",
                              "operator": "=",
                              "val": 1002,
                              "conjType": "or"
                          },
                          {
                              "field": "user_id",
                              "operator": "=",
                              "val": 1010,
                              "conjType": "or"
                          }
                      ],
                      "filterExt": [
                          [
                              {
                                  "fieldType": "json",
                                  "jField": "j_val",
                                  "jPath": "$.m",
                                  "operator": "=",
                                  "jVal": "user"
                              },
                              {
                                  "fieldType": "json",
                                  "jField": "j_val",
                                  "jPath": "$.domain.group_invitation_type_id",
                                  "operator": "=",
                                  "jVal": 1313
                              }
                          ]
                      ]
                  }
              ],
              "token": "5B812D34-EA96-9FFE-8EE9-443DEEF214A8"
          },
          "args": null
      }
   * @param filter 
   */

   // type orm query json column
this.repo.query('SELECT some-column->"$.email_verification.token" as `token`  FROM `user` WHERE some-column->"$.email_verification.token" = "some-token";');

getManager().getRepository(User)
    .createQueryBuilder('user')
    .select()
    // postgres syntax
    .where(`user.address ::jsonb @> \'{"state":"${query.location}"}\'`)

// working- option 1:
r = await repo.query('SELECT * FROM `inte_ract_pub` WHERE j_val->"$.domain.group.doc_id" = 11091;');

// working-option 2:
r = await repo.createQueryBuilder('inte_ract_pub')
    .select()
    /** mysql sytax: */
    .where(`JSON_EXTRACT(j_val, '$.domain.group.doc_id') = 11091`)
    .getMany()
